.\"
.\" Copyright (c) 2004 Gordon D. Carrie
.\" All rights reserved.
.\"
.\" Please send feedback to dev0@trekix.net
.\"
.\" $Revision: 1.11 $ $Date: 2010/11/17 21:55:28 $
.TH sigmet 1 Sigmet "Sigmet C functions"
.SH NAME
Sigmet_DataTypeN, Sigmet_DataType_Abbrv, Sigmet_DataType_Descr, Sigmet_DataType_Unit, Sigmet_NoData, Sigmet_IsData, Sigmet_IsNoData, Sigmet_DataType_ItoF, Sigmet_Bin4Rad, Sigmet_Bin2Rad, Sigmet_RadBin4, Sigmet_RadBin2, Sigmet_InitVol, Sigmet_FreeVol, Sigmet_GoodVol, Sigmet_ReadHdr, Sigmet_PrintHdr, Sigmet_ReadVol, Sigmet_BadRay, Sigmet_BinOutl, Sigmet_ToDorade \- read Sigmet raw data
.SH VERSION
1
.SH SYNOPSIS
.nf
\fB#include <sigmet.h>\fP
\fBenum Sigmet_DataTypeN Sigmet_DataTypeN(char\fP *\fIa\fP\fB);\fP
\fBchar *Sigmet_DataType_Abbrv(enum Sigmet_DataTypeN\fP \fIy\fP\fB);\fP
\fBchar *Sigmet_DataType_Descr(enum Sigmet_DataTypeN\fP \fIy\fP\fB);\fP
\fBchar *Sigmet_DataType_Unit(enum Sigmet_DataTypeN\fP \fIy\fP\fB);\fP
\fBfloat Sigmet_NoData(void\fP\fB);\fP
\fBint Sigmet_IsData(float\fP \fIv\fP\fB);\fP
\fBint Sigmet_IsNoData(float\fP \fIv\fP\fB);\fP
\fBfloat Sigmet_DataType_ItoF(enum Sigmet_DataTypeN\fP \fIy\fP, \fBstruct Sigmet_Vol\fP \fIv\fP,
	\fBunsigned\fP \fIi\fP\fB);\fP
\fBdouble Sigmet_Bin4Rad(unsigned long\fP \fIb\fP\fB);\fP
\fBdouble Sigmet_Bin2Rad(unsigned short\fP \fIb\fP\fB);\fP
\fBunsigned long Sigmet_RadBin4(double\fP \fIa\fP\fB);\fP
\fBunsigned long Sigmet_RadBin2(double\fP \fIa\fP\fB);\fP
\fBvoid Sigmet_InitVol(struct Sigmet_Vol\fP *\fIvol_p\fP\fB);\fP
\fBvoid Sigmet_FreeVol(struct Sigmet_Vol\fP *\fIvol_p\fP\fB);\fP
\fBint Sigmet_GoodVol(FILE\fP *\fIf\fP\fB);\fP
\fBenum Sigmet_ReadStatus Sigmet_ReadHdr(FILE\fP *\fIf, \fBstruct Sigmet_Vol\fP *\fIvol_p\fP\fB);\fP
\fBvoid Sigmet_PrintHdr(FILE *, struct Sigmet_Vol *);
\fBenum Sigmet_ReadStatus Sigmet_ReadVol(FILE\fP *\fIf\fP, \fBstruct Sigmet_Vol\fP *\fIvol_p\fP\fB);\fP
\fBint Sigmet_BadRay(struct Sigmet_Vol\fP *\fIvol_p\fP, \fBint\fP \fIs\fP, \fBint\fP \fIr\fP\fB);\fP
\fBint Sigmet_BinOutl(struct Sigmet_Vol\fP *\fIvol_p\fP, \fBint\fP \fIs\fP, \fBint\fP \fIr\fP, \fBint\fP \fIb\fP, \fBdouble\fP *\fIll\fP\fB);\fP
\fBint Sigmet_ToDorade(struct Sigmet_Vol\fP *\fIvol_p\fP, \fBint\fP \fIs\fP, \fBstruct Dorade_Sweep *\fIswp_p\fP\fB);\fP
.fi
.SH DESCRIPTION
These functions read and access data obtained from Sigmet raw product
volumes.  The functions, structures, and nomenclature are based on
the \fBIRIS Programmer's Manual, September 2002\fP.
.SH SIGMET DATA TYPES
A Sigmet data type is identified by an integer constant which must
be member of:

.nf
enum Sigmet_DataTypeN {
    DB_XHDR,    DB_DBT,         DB_DBZ,         DB_VEL,         DB_WIDTH,
    DB_ZDR,     DB_DBZC,        DB_DBT2,        DB_DBZ2,        DB_VEL2,
    DB_WIDTH2,  DB_ZDR2,        DB_RAINRATE2,   DB_KDP,         DB_KDP2,
    DB_PHIDP,   DB_VELC,        DB_SQI,         DB_RHOHV,       DB_RHOHV2,
    DB_DBZC2,   DB_VELC2,       DB_SQI2,        DB_PHIDP2,      DB_LDRH,
    DB_LDRH2,   DB_LDRV,        DB_LDRV2,       DB_DBL,		DB_SKIP,
    DB_ERROR
};
.fi

The first 28 types (DB_XHDR through DB_LDRV2), are defined by Sigmet.
See the Sigmet documentation for discussion of each type.
DB_DBL means the type is user defined. Values should be used as is. There
is no conversion from storage value to measurement. DB_SKIP indicates a
placeholder type. In other words, the types is not used in a volume.
DB_ERROR indicates an error.
.PP
\fBSigmet_DataType\fP returns the Sigmet data type enumerator corresponding
to short abbreviation \fIa\fP. If there is none, it returns DB_DBL, meaning
the type is user defined, so there is no Sigmet defined conversion.
.PP
\fBSigmet_DataType_Abbrv\fP returns a short abbreviation describing
type \fIy\fP.  \fBSigmet_DataType_Descr\fP returns a longer
description.  \fBSigmet_DataType_Unit\fP returns a physical unit. Return values
of these functions should not be modified by the user.
.PP
\fBSigmet_NoData\fP returns a value indicating missing of invalid data.
\fBSigmet_IsData\fP returns true if \fIv\fP is not the return value from
\fBSigmet_NoData\fP.
\fBSigmet_IsNoData\fP returns true if \fIv\fP is the return value from
\fBSigmet_NoData\fP.
.PP
\fBSigmet_DataType_ItoF\fP returns a measurement value corresponding
to integer storage value \fIi\fP from volume \fIv\fP, using the conversion
method for data type \fIy\fP.
.PP
\fBSigmet_Bin4Rad\fP returns the angle in radians corresponding to Sigmet four
byte binary angle \fIb\fP.
.PP
\fBSigmet_Bin2Rad\fP returns the angle in radians corresponding to Sigmet two
byte binary angle \fIb\fP.
.PP
\fBSigmet_RadBin4\fP returns the Sigmet four byte binary angle
\fIa\fP corresponding to angle in radians.
.PP
\fBSigmet_RadBin2\fP returns the Sigmet two byte binary angle
\fIa\fP corresponding to angle in radians.
.SH SIGMET RAW VOLUMES
Data from Sigmet raw product volumes are stored in structures of
type \fBstruct\ Sigmet_Vol\fP, which is declared in \fBsigmet.h\fP.
.PP
\fBSigmet_InitVol\fP initializes a Sigmet volume structure at
\fIvol_p\fP, whose previous contents are assumed to be garbage.
Upon return, \fIvol_p\fP can be safely passed to \fBSigmet_FreeVol\fP.
.PP
\fBSigmet_FreeVol\fP frees memory associated with a Sigmet volume
structure at \fIvol_p\fP and reinitializes the structure.
.PP
\fBSigmet_GoodVol\fP returns true if the file at \fIf\fP\fB is a readable
Sigmet raw product volume.
.PP
\fBSigmet_ReadHdr\fP and \fBSigmet_ReadVol\fP return an enumerator that indicates
whether the function succeeded, or how it failed. The return value will be one of:
.nf

    \fBSIGMET_READ_OK\fP - a volume was read and stored.
    \fBSIGMET_INPUT_FAIL\fP - some of a volume was read and stored, but
        input ended before a complete volume, as described in the headers,
        could be read.
    \fBSIGMET_BAD_VOL\fP - no valid volume is found. Nothing is stored.
    \fBSIGMET_MEM_FAIL\fP - there is not sufficient memory to store a volume.
        Nothing is stored.

.fi
.PP
\fBSigmet_ReadHdr\fP reads and stores volume headers for a Sigmet raw product
file from stream \fIf\fP into the volume structure at \fIvol_p\fP.
\fIf\fP should be at the start of a raw product file.  \fIvol_p\fP
should have been initialized at least once with a call to \fBSigmet_InitVol\fP.
Upon entry, \fBSigmet_ReadHdr\fP will free the contents of \fIf\fP with a call
to \fBSigmet_FreeVol\fP.  This function only reads volume headers. Sweep headers
and rays are left in their bogus initialized state.
\fBSigmet_ReadHdr\fP returns a read status enumerator described above, which
should be \fBSIGMET_READ_OK\fP.
If the return value is \fBSIGMET_INPUT_FAIL\fP, \fBSIGMET_BAD_VOL\fP, or
\fBSIGMET_MEM_FAIL\fP, the function stores nothing, it re-initializes the
structure at \fIvol_p\fP with a call to \fBSigmet_InitVol\fP, and it leaves
an error message that can be retrieved with \fBerr_get\fP.
.PP
\fBSigmet_ReadVol\fP reads and stores a Sigmet raw product
file from stream \fIf\fP into the volume structure at \fIvol_p\fP.
\fIf\fP should be at the start of a raw product file.  \fIvol_p\fP
should have already been initialized with a call to \fBSigmet_InitVol\fP.
Upon entry, \fBSigmet_ReadHdr\fP will free the contents of \fIf\fP with a call
to \fBSigmet_FreeVol\fP.  \fBSigmet_ReadVol\fP returns a read status enumerator
described above.  If the return value is \fBSIGMET_READ_OK\fP or
\fBSIGMET_INPUT_FAIL\fP, some of all of the volume is stored at \fIvol_p\fP.
Memory allocated should eventually be freed with a call to \fISigmet_FreeVol\fP.
If the return value is \fBSIGMET_BAD_VOL\fP or \fBSIGMET_MEM_FAIL\fP, it
re-initializes the structure at \fIvol_p\fP with a call to \fBSigmet_InitVol\fP.
If something goes wrong (return value is not \fBSIGMET_READ_OK\fP) it leaves an
error message which can be retrieved with \fBerr_get\fP.
.PP
\fBSigmet_PrintHdr\fP prints volume headers from \fIvol\fP to output
stream \fIout\fP.  Each line of output will have form:

.nf
    \fIvalue\fP \fB|\fP \fIhierarchy\fP \fB|\fP \fIdescription\fP
.fi

where \fIhierarchy\fP refers to a member's position in Sigmet's file
hierarchy, as described in section 3.2 of the IRIS Programmer's Manual.
Hierarchies are printed with form:

.nf
    ...\fB<\fP\fIparent\fP\fB>.<\fP\fIchild\fP\fB>.<\fP\fIgrandchild\fP\fB>.\fImember\fP
.fi

.PP
\fBSigmet_BadRay\fP returns true if the ray in \fIvol_p\fP at index
\fIs\fP, \fIr\fP is unusable.
.PP
\fBSigmet_BinOutl\fP computes the geographic coordinates of the bin for sweep
\fIs\fP, ray \fIr\fP, bin \fIb\fP in the Sigmet volume at \fIvol_p\fP.  The
coordinates are placed into array \fIll\fP as (\fIlon1 lat1 lon2 lat2 lon3 lat3
lon4 lat4\fP), denoting the corners of the bin.  Array \fIll\fP should point to
space for eight double values.  \fBSigmet_BinOutl\fP returns true if it succeeds.
If something goes wrong it returns false, leaving an error message which can be
retrieved with \fBerr_get\fP.
.PP
\fBSigmet_ToDorade\fP transfers information from sweep \fIs\fP of the Sigmet
volume at \fIvol_p\fP to the DORADE sweep structure at \fIswp_p\fP. The DORADE
sweep should have been initialized with a call to \fBDorade_Sweep_Init\fP.
\fBSigmet_ToDorade\fP returns true if it succeeds.  If something goes wrong it
returns false, leaving an error message which can be retrieved with \fBerr_get\fP.
.SH KEYWORDS
radar sigmet data
.SH AUTHOR
Gordon Carrie (user0@tkgeomap.org)
