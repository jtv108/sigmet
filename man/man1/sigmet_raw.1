.\" 
.\" Copyright (c) 2009 Gordon D. Carrie
.\" All rights reserved
.\" 
.\" Please address questions and feedback to dev0@trekix.net
.\" 
.\" $Revision: 1.27 $ $Date: 2010/09/02 20:40:21 $
.\"
.TH sigmet_raw 3 "Sigmet raw product"
.SH NAME
sigmet_rawd, sigmet_raw \- access Sigmet raw product volumes
.SH SYNOPSIS
.nf
\fBexport\fP \fBSIGMET_RAWD_DIR=\fP\fIdirectory\fP 
\fBsigmet_rawd &\fP
\fBsigmet_raw\fP \fBstart\fP \fIcommand ...\fP
\fBsigmet_raw\fP \fBpid\fP
\fBsigmet_raw\fP \fBtypes\fP
\fBsigmet_raw\fP \fBgood\fP \fIvolume_file\fP
\fBsigmet_raw\fP \fBlist\fP
\fBsigmet_raw\fP \fBkeep\fP \fIvolume_file\fP
\fBsigmet_raw\fP \fBdelete\fP \fIvolume_file\fP
\fBsigmet_raw\fP \fBvolume_headers\fP \fIvolume_file\fP
\fBsigmet_raw\fP \fBvol_hdr\fP \fIvolume_file\fP
\fBsigmet_raw\fP \fBnear_sweep\fP
\fBsigmet_raw\fP \fBray_headers\fP \fIvolume_file\fP
\fBsigmet_raw\fP \fBdata\fP [\fItype\fP] [\fIs\fP] [\fIr\fP] [\fIb\fP] \fIvolume_file\fP
\fBsigmet_raw\fP \fBbin_outline\fP \fIs\fP \fIr\fP \fIb\fP \fIunit\fP \fIvolume_file\fP
\fBsigmet_raw\fP \fBcolors\fP \fIdata_type\fP \fIcolors_file\fP
\fBsigmet_raw\fP \fBbintvls\fP \fItype\fP \fIs\fP \fIvolume_file\fP
\fBsigmet_raw\fP \fBradar_lon\fP \fIlon\fP \fIvolume_file\fP
\fBsigmet_raw\fP \fBradar_lat\fP \fIlat\fP \fIvolume_file\fP
\fBsigmet_raw\fP \fBshift_az\fP \fIangle\fP \fIvolume_file\fP
\fBsigmet_raw\fP \fBproj\fP \fIargs ...\fP
\fBsigmet_raw\fP \fBimg_app\fP \fIpath\fP
\fBsigmet_raw\fP \fBimg_sz\fP \fIn\fP
\fBsigmet_raw\fP \fBalpha\fP \fIa\fP
\fBsigmet_raw\fP \fBimg_name\fP [\fItype\fP] [\fIs\fP] \fIvolume_file\fP
\fBsigmet_raw\fP \fBimg\fP \fItype\fP \fIs\fP \fIvolume_file\fP
\fBsigmet_raw\fP \fBdorade\fP [\fIs\fP] \fIvolume_file\fP
.fi
.SH DESCRIPTION
The \fBsigmet_rawd\fP daemon reads, stores, and manipulates data from Sigmet
raw product volumes. The \fBsigmet_raw\fP client command accesses and controls
\fBsigmet_rawd\fP. The daemon keeps Sigmet volumes in memory, along
with information needed to access and manipulate them. It does not interact
with any terminal or other user interface. People and scripts control the daemon
with the \fBsigmet_raw\fP command.
.PP
When a \fBsigmet_raw\fP client requires action on a new volume, \fBsigmet_rawd\fP
automatically loads it and presents the data to the client. It keeps the volume
in memory, speeding subsequent \fBsigmet_raw\fP calls which refer to the same
volume.  When \fBsigmet_rawd\fP needs memory, it automatically deletes expendable
volumes.  A volume is expendable if it has not been modified in memory. The
descriptions below indicate which subcommands modify volumes in memory. If the
daemon has reached its memory limit and cannot delete volumes because none are
expendable, then \fBsigmet_raw\fP calls that require new volumes will fail until
memory is freed with one or more calls to \fBsigmet_raw\ delete\fP.
.SH INVOCATION
There are two methods for launching and using \fBsigmet_rawd\fP.
.TP
\fBexport SIGMET_RAWD_DIR=\fP\fIdir\fP; \fBsigmet_rawd &\fP
This method just launches a \fBsigmet_rawd\fP daemon. When it starts, the daemon
creates a directory named \fIdir\fP and populates it with log file
\fBsigmet.log\fP, error file \fBsigmet.err\fP, and socket \fBsigmet.in\fP. The
daemon then listens to the socket for requests from \fBsigmet_raw\fP clients.

If \fIdir\fP does not exist, \fBsigmet_rawd\fP creates it. If \fIdir\fP already
exists with socket \fIdir\fP\fB/sigmet.in\fP, \fBsigmet_rawd\fP assumes a running
daemon is using the socket and exits. If \fIdir\fP exists without a socket, the
new daemon creates a new socket and uses it. Logs left by any previous daemons are
overwritten. \fBsigmet_rawd\fP deletes its socket, but not the logs or directory,
during normal exit.  If \fBSIGMET_RAWD_DIR\fP is not set, it defaults to
\fB$HOME/.sigmet_raw\fP.

Before calling \fBsigmet_raw\fP, a script or user must set or inherit a
\fBSIGMET_RAWD_DIR\fP environment variable that specifies the working directory
of a running daemon.

The daemon will run until it receives a termination signal. The preferred signal
is TERM, usually sent as "\fBkill\ -TERM\fP\ \fIpid\fP", or just
"\fBkill\fP\ \fIpid\fP". Clean up will fail if a hard kill, e.g. \fB-ABRT\fP
or \fB-9\fP is used.  If the user logs out, or a script exits, the daemon will
continue in the background, possibly forever, which may not be desirable. Users
and scripts that just need one daemon while running should invoke the daemon with
\fBsigmet_raw\ start\fP, described next, which automates set up, clean up, and exit.
.TP
\fBexport SIGMET_RAWD_DIR=\fP\fIdir\fP; \fBsigmet_raw\fP \fBstart\fP \fIcommand ...\fP
This form launches \fBsigmet_rawd\fP in the background and launches
\fIcommand\ ...\fP in the foreground, with environment variable
\fBSIGMET_RAWD_DIR\fP set as indicated.
If \fBSIGMET_RAWD_DIR\fP is not set, \fBsigmet_raw\ start\fP sets it to
\fB$HOME/.sigmet_raw\fP before running \fIcommand\fP.  \fIcommand\fP can be an
interactive shell, e.g.  \fBsigmet_raw\ start\ bash\ -l\fP, or a shell script.
If \fIcommand\fP is an interactive shell, the prompt will return to a shell
prompt, and the user can type in commands.  Invocations of \fBsigmet_raw\fP on the
command line or in the script will use the specified daemon.

Invocations of \fBsigmet_raw\fP in other shells can use the same daemon if their
environments have the same value for \fBSIGMET_RAWD_DIR\fP.

The daemon automatically cleans up and exits when \fIcommand\fP exits, either
because the user logs out, or the script finishes.
.SH SUBCOMMANDS
The \fBsigmet_raw\fP takes action determined by the subcommand (second word on the
command line). The following forms are recognized. Type, sweep, ray, and bin
indeces start with \fB0\fP.
.TP
\fBsigmet_raw\fP \fBpid\fP
Prints the daemon's process id.
.TP
\fBsigmet_raw\fP \fBtypes\fP
Prints a list of Sigmet data types.  Output lines have form:
.sp 1
.ti +4
\fIDB_XXX\fP \fB|\fP \fIDescription\fP
.sp 1
See the IRIS Programmer's Manual for information about Sigmet data types.
.TP
\fBsigmet_raw\fP \fBgood\fP \fIvolume_file\fP
This command attempts to navigate \fIvolume_file\fP, but does not store any data.
No output is printed.  This command returns 0 if it succeeds and the volume is
good, 1 if \fIvolume_file\fP does not exist, 2 if it cannot read
\fIvolume_file\fP, and 3 if \fIvolume_file\fP is not a good volume.
.TP
\fBsigmet_raw\fP \fBlist\fP
Prints a list of currently loaded volumes, along with their keep status, sweep
count, and size.
If keep status is "\fBFree\fP", the volume is expendable, and the daemon
will unload it if it needs memory.
If keep status is "\fBKeep\fP", the daemon will keep the volume until it is
deleted with a call to \fBsigmet_raw\ delete\fP.
Sweep count gives the number of sweeps loaded and the number indicated in the
volume file headers. The number loaded will be less if headers but not data
are loaded, or if the volume is incomplete.
.TP
\fBsigmet_raw\fP \fBkeep\fP \fIvolume_file\fP
Tells the daemon not to delete the volume obtained from \fIvolume_file\fP.
After this call, the volume is no longer expendable. It should eventually be
unloaded with a call to \fBsigmet_raw\ delete\fP.
.TP
\fBsigmet_raw\fP \fBdelete\fP \fIvolume_file\fP
Unloads the volume obtained from \fIvolume_file\fP. All changes are lost. If
the volume is reloaded later, it will have the original headers and data from
\fIvolume_file\fP.
.TP
\fBsigmet_raw\fP \fBvolume_headers\fP \fIvolume_file\fP
Prints volume headers for the volume obtained from \fIvolume_file\fP.
Ray headers and data are not printed.  Output lines have form:
.sp 1
.ti +4
\fIvalue\fP \fB|\fP \fIhierarchy\fP \fB|\fP \fIdescriptor\fP
.sp 1
In this context, \fIhierarchy\fP refers to the Sigmet data
structures that contain the member.  For a hierarchy with two
levels, it would look like
.sp 1
.ti +4
\fI<struct1>.<struct2>.member\fP.
.sp 1
This format is easy to search and manipulate, but painful to look at. For
a prettier list, use something like:
.sp 1
\fBsigmet_raw\fP \fBvolume_headers\fP \fIvolume_file\fP \fB\\
.br
| awk -F\\| '{printf "%s = %s\\n %s\\n\\n", $2, $1, $3}'\fP
.sp 1
Be aware that the same member might reside in several structure
hierarchies. See the IRIS Programmer's Manual for details.
.TP
\fBsigmet_raw\fP \fBvol_hdr\fP \fIvolume_file\fP
Prints a short list of commonly used volume headers.  Output will look like:
.nf

    \fBsite_name\fP="\fIsite_name_from_setup\fP"
    \fBradar_lon\fP=\fIlongitude_degrees\fP
    \fBradar_lat\fP=\fIlatitude_degrees\fP
    \fBtask_name\fP="\fItask_name\fP"
    \fBtypes\fP="\fItype_name\fP \fItype_name\fP ..."
    \fBnum_sweeps\fP=\fIinteger\fP
    \fBnum_rays\fP=\fIinteger\fP
    \fBnum_bins\fP=\fIinteger\fP
    \fBrange_bin0\fP=\fIinteger_cm\fP
    \fBbin_step\fP=\fIinteger_cm\fP

.fi
.TP
\fBsigmet_raw\fP \fBnear_sweep\fP \fIangle\fP \fIvolume_file\fP
Prints the index of the sweep whose fixed angle is nearest \fIangle\fP degrees
in the volume from \fIvolume_file\fP.
.TP
\fBsigmet_raw\fP \fBray_headers\fP \fIvolume_file\fP
Prints ray times, azimuths, and tilts for
the volume obtained from \fIvolume_file\fP.
Volume headers and data are not printed.
.TP
\fBsigmet_raw\fP \fBdata\fP \fIvolume_file\fP
Prints an ASCII stream of all volume data for 
the volume obtained from \fIvolume_file\fP.
Headers are not printed.
.TP
\fBsigmet_raw\fP \fBdata\fP \fItype\fP \fIvolume_file\fP
Prints an ASCII stream of data for data type \fItype\fP for
the volume obtained from \fIvolume_file\fP.
.TP
\fBsigmet_raw\fP \fBdata\fP \fItype\fP \fIs\fP \fIvolume_file\fP
Prints an ASCII stream of data for data type \fItype\fP, sweep \fIs\fP.
for the volume obtained from \fIvolume_file\fP.
.TP
\fBsigmet_raw\fP \fBdata\fP \fItype\fP \fIs\fP \fIr\fP \fIvolume_file\fP
Prints an ASCII stream of data for data type \fItype\fP, sweep \fIs\fP, ray \fIr\fP
for the volume obtained from \fIvolume_file\fP.
.TP
\fBsigmet_raw\fP \fBdata\fP \fItype\fP \fIs\fP \fIr\fP \fIb\fP \fIvolume_file\fP
Prints an ASCII stream of data for data type \fItype\fP, sweep \fIs\fP,
ray \fIr\fP, bin \fIb\fP for
the volume obtained from \fIvolume_file\fP.
.TP
\fBsigmet_raw\fP \fBbin_outline\fP \fIs\fP \fIr\fP \fIb\fP \fIunit\fP \fIvolume_file\fP
Prints the corners of bin \fIs\fP \fIr\fP \fIb\fP for
the volume obtained from \fIvolume_file\fP.
The corners will be printed as
"\fIlon1\ lat1 lon2\ lat2 lon3\ lat3 lon4\ lat4\fP".
Angle unit will be radians if \fIunit\fP is \fBradian\fP.
Angle unit will be degrees if \fIunit\fP is \fBdegree\fP.
.TP
\fBsigmet_raw\fP \fBcolors\fP \fIdata_type\fP \fIcolors_file\fP
Sets display colors for Sigmet data type \fIdata_type\fP.  \fIcolors_file\fP
must give an array of data boundaries, \fIbounds\fP, and an array of corresponding
colors, \fIcolors\fP, in the following format:
.nf

    \fBraster\fP \fInum_colors\fP
    \fIbounds[0]\fP \fIcolors[0]\fP
    \fIbounds[1]\fP \fIcolors[1]\fP
    ...
    \fIbounds[num_colors-1]\fP \fIcolors[num_colors-1]\fP
    \fIbounds[num_colors]\fP

.fi
Sequences of spaces, tabs, and newlines are treated as single whitespace characters.
Members of \fIbounds\fP must be float values. The \fIbounds\fP array must be
monotonic.  Members of the \fIcolors\fP array must have the form
\fB#\fP\fIrrggbb\fP, where \fIrr\fP, \fIgg\fP, \fIgg\fP are hexadecimal red, green,
and blue values.
In subsequent displays, a bin (gate) whose value satisfies
bounds[i]\ <=\ value\ <\ bounds[i+1] will be displayed with colors[i].
This command returns 0 if it succeeds, 1 if \fIcolors_file\fP is inaccessible or
corrupt, 2 if the daemon runs out of memory, and 3 for any other error.
.TP
\fBsigmet_raw\fP \fBbintvls\fP \fItype\fP \fIs\fP \fIvolume_file\fP
Assigns bins (gates) for data type \fItype\fP, sweep \fIs\fP, in the volume from
\fIvolume_file\fP, to intervals in the current sequence of data bounds.
The data bounds for the data type should have been set with a call to \fBbounds\fP.
For each bin with a data value in the current bounds sequence, there will be one
line in standard output, of form:
.nf
i: r b
.fi
where \fIi\fP specifies an index from the sequence of data bounds, and \fIr\fP and
\fIb\fP specify a bin whose value satisfies bounds[i]\ <=\ value\ <\ bounds[i+1].
.TP
\fBsigmet_raw\fP \fBradar_lon\fP \fIlon\fP \fIvolume_file\fP
Sets radar longitude to \fIlon\fP degrees.
After this call, the volume is no longer expendable. It should eventually be
unloaded with a call to \fBsigmet_raw\ delete\fP.
.TP
\fBsigmet_raw\fP \fBradar_lat\fP \fIlat\fP \fIvolume_file\fP
Sets radar latitude to \fIlat\fP degrees.
After this call, the volume is no longer expendable. It should eventually be
unloaded with a call to \fBsigmet_raw\ delete\fP.
.TP
\fBsigmet_raw\fP \fBshift_az\fP \fIangle\fP \fIvolume_file\fP
Adds \fIangle\fP degrees to all azimuths in the volume obtained from
\fIvolume_file\fP.
After this call, the volume is no longer expendable. It should eventually be
unloaded with a call to \fBsigmet_raw\ delete\fP.
.TP
\fBsigmet_raw\fP \fBproj\fP \fIargs ...\fP
Sets the cartographic projection. \fIargs ...\fP should define a cartographic
projection known to the Unix \fBproj\fP command.
.TP
\fBsigmet_raw\fP \fBimg_app\fP \fIpath\fP
Identifies the external application that the \fBimg\fP subcommand will use
to generate images. \fBpath\fP should give the name of an executable that reads
image information from standard input and generates an image file. The daemon will
send information to the image generating process as a stream of \fBxdr\fP encoded
values.  Daemon output/image process input will have the following values in the
order given:
.nf

    unsigned int     - number of chars in image file name, excluding \fBnul\fP.
    string           - image file name
    unsigned int     - image width, pixels
    unsigned int     - image height, pixels
    double           - real (map) coordinate of left edge of image
    double           - real (map) coordinate of right edge of image
    double           - real (map) coordinate of top edge of image
    double           - real (map) coordinate of bottom edge of image
    double           - image alpha channel, in range [0.0,1.0]
    unsigned int     - number of colors
    For each color:
        unsigned int - red value for color, in range [0,256)
        unsigned int - green value for color, in range [0,256)
        unsigned int - blue value for color, in range [0,256)
    For each polygon (gate):
        unsigned int - color index
        unsigned int - number of points (always 4)
        For each point:
            double   - real (map) coordinate of vertex abscissa
            double   - real (map) coordinate of vertex ordinate

.fi
.TP
\fBsigmet_raw\fP \fBimg_sz\fP \fIn\fP
Sets the size of images created with the \fBimg\fP subcommand to \fIn\fP pixels.
.TP
\fBsigmet_raw\fP \fBalpha\fP \fIa\fP
Sets the alpha value of images created with the \fBimg\fP subcommand to \fIa\fP.
Alpha value can range from \fB0.0\fP (transparent) to \fB1.0\fP (opaque).
.TP
\fBsigmet_raw\fP \fBimg_name\fP \fItype\fP \fIs\fP \fIvolume_file\fP
Prints the name of the file which the \fBimg\fP subcommand will create for data
type \fItype\fP, sweep \fIs\fP in the volume obtained from \fIvolume_file\fP.
.TP
\fBsigmet_raw\fP \fBimg\fP \fItype\fP \fIs\fP \fIvolume_file\fP
Makes an image for data type \fItype\fP, sweep \fIs\fP in the volume obtained
from \fIvolume_file\fP.  This command fails if the image file already exists.
.TP
\fBsigmet_raw\fP \fBdorade\fP [\fIs\fP] \fIvolume_file\fP
Creates DORADE sweep files in the current directory from data in \fIvolume_file\fP.
If \fIs\fP is an integer, this command only makes a sweep file that sweep. If
\fIs\fP is absent, or "\fBall\fP", this command makes sweep files for the entire
volume.
.SH SEE ALSO
sigmet (3), proj (1), pj_init (3), xdr (3)
.br
IRIS Programmer's Manual
.br
ftp://ftp.sigmet.com/outgoing/manuals/program/3data.pdf
.br
RFC4506
.br
Cartographic Projection Procedures for the UNIX Environment --A User's Manual, (Evenden, 1990, Open-file report 90-284).
.SH AUTHOR
Gordon Carrie (dev0@trekix.net)
