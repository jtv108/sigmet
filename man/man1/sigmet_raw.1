.\" 
.\" Copyright (c) 2009 Gordon D. Carrie
.\" All rights reserved
.\" 
.\" Please address questions and feedback to dev0@trekix.net
.\" 
.\" $Revision: 1.14 $ $Date: 2010/02/24 17:23:46 $
.\"
.TH sigmet_raw 3 "Sigmet raw product"
.SH NAME
sigmet_rawd, sigmet_raw \- access Sigmet raw product volumes
.SH SYNOPSIS
.nf
\fBexport\fP \fBSIGMET_RAWD_DIR=\fP\fIdirectory\fP 
\fBsigmet_rawd\fP > \fIoutput\fP 2> \fIerror\fP &
\fBsigmet_raw\fP [\fIcommand\fP] [\fIoptions\fP]
\fBsigmet_raw\fP \fBtimeout\fP
\fBsigmet_raw\fP \fBtypes\fP
\fBsigmet_raw\fP \fBread\fP \fIvolume_file\fP
\fBsigmet_raw\fP \fBrelease\fP \fIvolume_file\fP
\fBsigmet_raw\fP \fBvolume_headers\fP \fIvolume_file\fP
\fBsigmet_raw\fP \fBvol_hdr\fP \fIvolume_file\fP
\fBsigmet_raw\fP \fBray_headers\fP \fIvolume_file\fP
\fBsigmet_raw\fP \fBdata\fP [\fItype\fP] [\fIs\fP] [\fIr\fP] [\fIb\fP] \fIvolume_file\fP
\fBsigmet_raw\fP \fBbin_outline\fP \fIs\fP \fIr\fP \fIb\fP \fIvolume_file\fP
\fBsigmet_raw\fP \fBbounds\fP \fIdata_type\fP \fInum_bounds\fP \fIbounds_file\fP
\fBsigmet_raw\fP \fBcolors\fP \fIdata_type\fP \fIcolors_file\fP
\fBsigmet_raw\fP \fBbintvls\fP \fItype\fP \fIs\fP \fIvolume_file\fP
\fB#ifdef PROJ4\fP
\fBsigmet_raw\fP \fBproj\fP \fIargs ...\fP
\fB#endif\fP
\fBsigmet_raw\fP \fBimg_config\fP \fIformat\fP \fIwidth_phys\fP \fIwidth_dpy\fP \fIheight_dpy\fP
\fBsigmet_raw\fP \fBstop\fP
.fi
.SH DESCRIPTION
\fBsigmet_rawd\fP is a daemon that reads, stores, and manipulates data from
Sigmet raw product volumes.  \fBsigmet_raw\fP is a client that interacts with it.
.PP
\fBsigmet_rawd\fP and \fBsigmet_raw\fP require environment variable
\fBSIGMET_RAWD_DIR\fP, that identifies the directory where the daemon and clients
keep files.  This directory must exist before the \fBsigmet_rawd\fP can start.
Users with read-write-execute permission to this directory will be able to
access and manipulate the daemon. Therefore, directory permissions should be set
according to who should have access to the daemon.
.PP
The daemon stores an array of volumes for repeated access.  Multiple invocations
of \fBsigmet_raw\fP in various shells where \fBSIGMET_RAWD_DIR\fP is set can
access the stored volumes.  Subcommands and options to \fBsigmet_raw\fP, described
below, tell the daemon to read, manipulate, provide information from, and release
volumes in the daemon's internal array
.PP
When a \fBsigmet_raw\fP instance connects to the daemon, other clients are
blocked.  If a client does not detach from the server in a reasonable amount of
time, the daemon kills it. This prevents frozen clients from freezing the daemon.
Users who want to interact with a personal daemon can override this potentially
obnoxious behavior with the \fBtimeout\fP subcommand.
.PP
Once \fBsigmet_rawd\fP is running, the commands listed below are recognized.
Note that file names should be given as absolute paths, since the daemon
is probably not using the same current working directory as the client.
.TP
\fBsigmet_raw\fB \fBtypes\fP
Prints a list of Sigmet data types.  Output lines have form:
.sp 1
.ti +4
\fIDB_XXX\fP \fB|\fP \fIDescription\fP
.sp 1
See the IRIS Programmer's Manual for information about Sigmet data types.
.TP
\fBsigmet_raw\fP \fBtimeout\fP
Prints the time limit for clients - the maximum time a client can block the daemon
before the daemon kills it.  It also reports whether the timeout is \fBfixed\fP,
meaning the daemon will never adjust the timeout, or \fBadjustable\fP, meaning
the daemon will periodically adjust the timeout based on how long sampled
clients are taking.
.TP
\fBsigmet_raw\fP \fBtimeout\fP \fBnone\fP
Disables client timeout. Any client will have the daemon's input and output
channels until the client exits. All other clients will be blocked. Human
users who want to interact with output, e.g. send it through pagers, should
probably disable the timeout.
.TP
\fBsigmet_raw\fP \fBtimeout\fP \fIinteger\fP [\fBadjustable\fP|\fBfixed\fP]
Sets client timeout to \fIinteger\fP seconds.  If present, optional suffix
adjusts the timeout behavior as described above. Daemons that provide output to
multitudes of anonymous users should be allowed to adjust their timeout to boost
performance.  Timeout will decrease if clients run quickly, meaning frozen clients
will be quickly killed.  Timeout will increase if clients get killed, allowing for
possibly slow network connections or user interaction. Scripts that access
impatient daemons should probably make several connection attempts to improve
chances of reaching a potentially overloaded daemon.
.TP
\fBsigmet_raw\fP \fBstop\fP
Stops the daemon. Working directory continues to exist. Subsequent calls to
\fBsigmet_raw\fP will fail.
.TP
\fBsigmet_raw\fP \fBgood\fP \fIvolume_file\fP
Returns success if \fIvolume_file\fP contains a valid Sigmet raw product
volume. Otherwise, \fBsigmet_raw\fP returns failure. No output is printed,
and nothing from the volume is stored. The daemon only tries the read the
headers and navigate the data section of the file.
.TP
\fBsigmet_raw\fP \fBread\fP \fIvolume_file\fP
Tells the daemon to read \fIvolume_file\fP, which must be the path of a Sigmet raw
product file.  Contents of the volume will be stored in memory for subsequent
calls to \fBsigmet_raw\fP.  Calls that use the volume will identify it by the file
that provided it. Paths given later do not have to perfectly match
\fIvolume_file\fP, they just have to identify the same file.
(Links and relative paths are handled correctly.)
Each call to \fBread\fP increments a user count associated with the volume.
The daemon will not delete a volume with a positive user count.  The user
count should eventually be decreased with a call to \fBrelease\fP.
If a volume is already in storage, the daemon will not normally read it again.
It will only increment the user count. The daemon will attempt to re-read the
volume if it is loaded but truncated - missing sweeps. This could happen if
the volume is being written by a slow network connection, or if the radar
operator issued a "stop now" command before the Sigmet task completed.  The
\fBtruncated\fP header member obtained with
\fBsigmet_raw\fP\ \fBvolume_headers\fP indicates whether a loaded volume is
truncated.
.TP
\fBsigmet_raw\fP \fBrelease\fP \fIvolume_file\fP
Decrements the user count associated with the Sigmet volume obtained from
\fIvolume_file\fP. When user count reaches \fB0\fP, storage associated with
the volume becomes available for new volumes.  Every call to
\fBsigmet_raw\fP\ \fBread\fP should have a corresponding call to
\fBsigmet_raw\fP\ \fBrelease\fP
.TP
\fBsigmet_raw\fP \fBvolume_headers\fP \fIvolume_file\fP
Prints volume headers for
the volume obtained from \fIvolume_file\fP, which should have been loaded with a
call to \fBsigmet_raw\fP\ \fBread\fP.
Ray headers and data are not printed.  Output lines have form:
.sp 1
.ti +4
\fIvalue\fP \fB|\fP \fIhierarchy\fP \fB|\fP \fIdescriptor\fP
.sp 1
In this context, \fIhierarchy\fP refers to the Sigmet data
structures that contain the member.  For a hierarchy with two
levels, it would look like
.sp 1
.ti +4
\fI<struct1>.<struct2>.member\fP.
.sp 1
Be aware that the same member might reside in several structure
hierarchies.  See the IRIS Programmer's Manual for details.
.TP
\fBsigmet_raw\fP \fBvol_hdr\fP \fIvolume_file\fP
Prints a short list of commonly used volume headers.  Output will look like:
.nf
\fBsite_name\fP="\fIsite_name_from_setup\fP"
\fBradar_lon\fP=\fIlongitude_degrees\fP
\fBradar_lat\fP=\fIlatitude_degrees\fP
\fBtask_name\fP="\fItask_name\fP"
\fBtypes\fP="\fItype_name\fP \fItype_name\fP ..."
\fBnum_sweeps\fP=\fIinteger\fP
\fBnum_rays\fP=\fIinteger\fP
\fBnum_bins\fP=\fIinteger\fP
\fBrange_bin0\fP=\fIinteger_cm\fP
\fBbin_step\fP=\fIinteger_cm\fP
.fi
.TP
\fBsigmet_raw\fP \fBray_headers\fP \fIvolume_file\fP
Prints ray times, azimuths, and tilts for
the volume obtained from \fIvolume_file\fP, which should have been loaded with a
call to \fBsigmet_raw\fP\ \fBread\fP.
Volume headers and data are not printed.
.TP
\fBsigmet_raw\fP \fBdata\fP \fIvolume_file\fP
Prints an ASCII stream of all volume data for 
the volume obtained from \fIvolume_file\fP, which should have been loaded with a
call to \fBsigmet_raw\fP\ \fBread\fP.
Headers are not printed.
.TP
\fBsigmet_raw\fP \fBdata\fP \fItype\fP \fIvolume_file\fP
Prints an ASCII stream of data for data type \fItype\fP for
the volume obtained from \fIvolume_file\fP, which should have been loaded with a
call to \fBsigmet_raw\fP\ \fBread\fP.
.TP
\fBsigmet_raw\fP \fBdata\fP \fItype\fP \fIs\fP \fIvolume_file\fP
Prints an ASCII stream of data for data type \fItype\fP, sweep \fIs\fP.
for the volume obtained from \fIvolume_file\fP, which should have been loaded with a
call to \fBsigmet_raw\fP\ \fBread\fP.
.TP
\fBsigmet_raw\fP \fBdata\fP \fItype\fP \fIs\fP \fIr\fP \fIvolume_file\fP
Prints an ASCII stream of data for data type \fItype\fP, sweep \fIs\fP, ray \fIr\fP
for the volume obtained from \fIvolume_file\fP, which should have been loaded with
a call to \fBsigmet_raw\fP\ \fBread\fP.
.TP
\fBsigmet_raw\fP \fBdata\fP \fItype\fP \fIs\fP \fIr\fP \fIb\fP \fIvolume_file\fP
Prints an ASCII stream of data for data type \fItype\fP, sweep \fIs\fP,
ray \fIr\fP, bin \fIb\fP for
the volume obtained from \fIvolume_file\fP, which should have been loaded with a
call to \fBsigmet_raw\fP\ \fBread\fP.
.TP
\fBsigmet_raw\fP \fBbin_outline\fP \fIs\fP \fIr\fP \fIb\fP \fIvolume_file\fP
Prints the corners of bin \fIs\fP \fIr\fP \fIb\fP for
the volume obtained from \fIvolume_file\fP, which should have been loaded with a
call to \fBsigmet_raw\fP\ \fBread\fP.
The corners will be printed as
"\fIlon1\ lat1 lon2\ lat2 lon3\ lat3 lon4\ lat4\fP".
.TP
\fBsigmet_raw\fP \fBbounds\fP \fIdata_type\fP \fInum_bounds\fP \fIbounds_file\fP
Obtains the bounds for data intervals to be displayed with given colors, for
Sigmet data type \fIdata_type\fP. The command will read \fInum_bounds\fP
values from \fIbounds_file\fP, which should contain a monotonic sequence of
float values, separated by whitespace.  Display and manipulation commands
will use these bounds to bin data values into discrete intervals.
.TP
\fBsigmet_raw\fP \fBcolors\fP \fIdata_type\fP \fIcolors_file\fP
Sets display colors for Sigmet data type \fIdata_type\fP. Bounds for the data
intervals should have already been set with a call to \fBbounds\fP. This command
will read \fInum_bounds\fP\fB-1\fP color values from \fIcolors_file\fP. Each
color value must consist of three whitespace separated floating point values in 
range \fB[0,1]\fP, giving red, green, and blue values for the data interval.
In subsequent displays, a bin (gate) whose value satisfies
bounds[i]\ <=\ value\ <\ bounds[i+1] will be displayed with colors[i].
.TP
\fBsigmet_raw\fP \fBbintvls\fP \fItype\fP \fIs\fP \fIvolume_file\fP
Assigns bins (gates) for data type \fItype\fP, sweep \fIs\fP, in the volume from
\fIvolume_file\fP, to intervals in the current sequence of data bounds.
The volume in \fIvolume_file\fP should have been loaded with a call to
\fBsigmet_raw\fP\ \fBread\fP.  The data bounds for the data type should have
been set with a call to \fBbounds\fP.
For each bin with a data value in the current bounds
sequence, there will be one line in standard output, of form:
.nf
i: r b
.fi
where \fIi\fP specifies an index from the sequence of data bounds, and \fIr\fP and
\fIb\fP specify a bin whose value satisfies bounds[i]\ <=\ value\ <\ bounds[i+1].
.TP
\fBsigmet_raw\fP \fBproj\fP \fIargs ...\fP
Sets the cartographic projection. \fIargs ...\fP should define a cartographic
projection known to the Unix \fBproj\fP command.
.TP
\fBsigmet_raw\fP \fBimg_config\fP \fIformat\fP \fIwidth_phys\fP \fIwidth_dpy\fP \fIheight_dpy\fP
Specifies a configuration for output images.
\fIformat\fP indicates image type, currently
\fBpng\fP for Portable Network Graphics files, or
\fBps\fP for postscript.
\fIwidth_phys\fP indicates the physical width of the area presented in the image.
It should be something commensurate with the real size of a radar sweep. Units
depend on what is displayed (e.g. PPI or RHI) and how it is transformed.  They
will probably be meters, degrees of latitude or the like.
\fIwidth_dpy\fP and \fIheight_dpy\fP specify the image size in display units,
pixels for \fBpng\fP or points for \fBps\fP.
.SH SEE ALSO
sigmet (3)
.br
proj (1)
.br
pj_init (3)
.br
Cartographic Projection Procedures for the  UNIX  Environment--A  User's  Manual,
(Evenden, 1990, Open-file report 90-284).
.br
IRIS Programmer's Manual (http://sigmet.com)
.SH AUTHOR
Gordon Carrie (dev0@trekix.net)
