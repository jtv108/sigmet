#!/bin/sh
#
# sigmet_svg --
#	Print bin outlines as SVG polygons.
#
# Usage:
#	sigmet_svg [-f] [-d] [-b bounds] [-x pixels] [-y pixels] [-w pixels] --
#	    data_type colors_file sweep_index volume_file
# where:
#	-f		- fill gaps between adjacent rays.
#	-d		- make a standalone svg file. Default is to make
#			  an svg element.
#	-b		- Limits of plot in plot coordinates (not display
#			  coordinates). bounds must be a string of form
#			  x_min=value,x_max=value,y_min=value,y_max=value
#			  Does not have to give all values. For values not
#			  given, default is to use sweep bounds.
#	-x		- x attribute of svg element in display. Ignored if -d
#			  option is present.
#	-y		- y attribute of svg element in display. Ignored if -d
#			  option is present.
#	-w		- width attribute of svg element in display. Ignored
#			  if -d option is present.
#	data_type	- data type (e.g. DB_DBZ, DB_ZDR).
#	colors_file	- specify color for each data interval. Should be
#			  formatted for sigmet_raw outlines command.
#	sweep_index	- index of sweep in volume. First sweep is 0.
#	volume_file	- Sigmet raw product file
#
# Environment variables
#	SIGMET_RAW_IMG_SZ	- (optional) image width, pixels
#
# The SVG code goes to standard output.
#
# Copyright (c) 2012, Gordon D. Carrie. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 
#     * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Please send feedback to dev0@trekix.net

# Check for numerical value
check_num() {
    name="$1"
    val="$2"
    if ! test $val
    then
	printf "%s not set\n" "$name" 1>&2
	exit 1
    fi
    if ! printf '%g' $val > /dev/null 2>&1
    then
	printf "$0: expected number for %s, got %s\n" "$name" "$val" 1>&2
	exit 1
    fi
}

# Parse command line
fill=
doc=
x_dpy=
y_dpy=
w_dpy=
x_min=
x_max=
y_min=
y_max=
while getopts :fdb:x:y:w: opt
do
    case "$opt"
    in
	f)
	    fill="-f"
	    ;;
	b)
	    eval `echo "$OPTARG" | sed 's/,/;/g'`
	    ;;
	d)
	    doc="-d"
	    ;;
	x)
	    x_dpy=$OPTARG
	    check_num "display x coordinate" $x_dpy
	    x_dpy="-x $x_dpy"
	    ;;
	y)
	    y_dpy=$OPTARG
	    check_num "display y coordinate" $y_dpy
	    y_dpy="-y $y_dpy"
	    ;;
	w)
	    w_dpy=$OPTARG
	    check_num "display width" $w_dpy
	    w_dpy="-w $w_dpy"
	    ;;
	\?)
	    echo "$0: unknown option $OPTARG" 1>&2
	    exit 1
	    ;;
    esac
done
if test $x_min; then check_num "x_min" $x_min; fi
if test $x_max; then check_num "x_max" $x_max; fi
if test $y_min; then check_num "y_min" $y_min; fi
if test $y_max; then check_num "y_max" $y_max; fi
shift `expr $OPTIND - 1`
if [ $# -ne 4 ]
then
    {
	printf "Usage: $0 [-f] [-d] [-b bounds] [-x pixels] [-y pixels]"
	printf " [-w pixels] -- data_type colors_file sweep_index volume_file\n"
    } 1>&2
    exit 1
fi
data_type="$1"
color_fl="$2"
sweep_index="$3"
vol_path="$4"

# Check for color table
if ! test -f "$color_fl"
then
    echo "$0: could not find color file $color_fl" 1>&2
    exit 1
fi

# Run sigmet_raw. Send commands and read output from fifos. Arrange for
# sigmet_raw termination and clean up on any exit.
cleanup() {
    echo > $out &
    cat $out > /dev/null
    echo exit > $in
    rm -f $in $out
}
trap cleanup EXIT
trap cleanup QUIT
trap cleanup INT
trap cleanup KILL
vol_fl=`basename $vol_path`
vol=`echo $vol_fl | sed -e 's/\.gz$//' -e 's/\.bz2$//'`
in=.${vol}.$$.in
out=.${vol}.$$.out
mkfifo $in $out
sigmet_raw ${vol_path} $in &

# This function tells the sigmet_raw daemon to run a command and send the
# output to the out fifo.
sig_raw () {
    printf "open %s\n%s\nclose\n" "$out" "$*" > "$in"
}

# Assign sweep bounds to x_min, x_max, y_min, and y_max if not set from
# command line.
sig_raw sweep_bnds $sweep_index
eval `cat $out | awk '
/x_min +[0-9.Ee-]+ +x_max +[0-9.Ee-]+ +y_min +[0-9.Ee-]+ +y_max +[0-9.Ee-]+/ {
    x_min = $2;
    x_max = $4;
    y_min = $6;
    y_max = $8;
    printf "if ! test $x_min;then x_min=%s;fi; ", x_min;
    printf "if ! test $x_max;then x_max=%s;fi; ", x_max;
    printf "if ! test $y_min;then y_min=%s;fi; ", y_min;
    printf "if ! test $y_max;then y_max=%s;fi;\n", y_max;
}'`
check_num "sweep x min" $x_min
check_num "sweep x max" $x_max
check_num "sweep y min" $y_min
check_num "sweep y max" $y_max
width=`echo "$x_max - $x_min" | bc -l`
height=`echo "$y_max - $y_min" | bc -l`

# Print outlines.
sig_raw outlines $fill $data_type $color_fl $sweep_index &
cart_svg $doc $x_dpy $y_dpy $w_dpy -- $x_min $y_min $width $height \
	sigmet_svg.awk $out
exit 0
