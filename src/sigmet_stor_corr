#!/usr/bin/awk -f
#
# Read a chronological list of volume specifiers and correction information
# from standard input. For each volume, create a file specifying corrections
# for that volume.
#
# Copyright (c) 2011, Gordon D. Carrie. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 
#     * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Please send feedback to dev0@trekix.net

BEGIN {
    # This counter ensures that commands are printed in the order read.
    n_cmd = 0
}

/START +DATA_TYPE/ {
    # Line is assumed to be of form:
    # epoch_time YYYY/MM/DD HH:MM:SS radar START DATA_TYPE | data_type \
    #	| description | unit
    # Note that the line uses | as a field separator, so description and unit
    # can have white space.
    # Add entry to corr array ordering creation of a new data type.
    split($0, w, "|")
    data_type = w[2]
    description = w[3]
    unit = w[4]
    sub("^ *", "", data_type)
    sub(" *$", "", data_type)
    sub("^ *", "", description)
    sub(" *$", "", description)
    sub("^ *", "", unit)
    sub(" *$", "", unit)
    corr[n_cmd] = sprintf("New data type: | %s | %s | %s",
	data_type, description, unit)
    n_corr["DATA_TYPE",data_type] = n_cmd
    n_cmd++
}
/END +DATA_TYPE/ {
    # Line is assumed to be of form:
    # epoch_time YYYY/MM/DD HH:MM:SS radar END DATA_TYPE data_type description unit
    # Remove entry from corr array.
    split($0, w, "|")
    data_type = w[2]
    n_del = n_corr["DATA_TYPE",data_type]
    delete corr[n_del]
    n_cmd--
}
/START +COPY/ {
    # Line is assumed to be of form:
    # epoch_time YYYY/MM/DD HH:MM:SS radar START COPY old_field new_field
    # Add entry to corr array to make new field named new_field with value
    # taken from old_field. New field must be of a data type created with
    # a DATA_TYPE line.
    old_field = $7
    new_field = $8
    corr[n_cmd] = sprintf("Copy %s to %s", old_field, new_field)
    n_corr["COPY",old_field,new_field] = n_cmd
    n_cmd++
}
/END +COPY/ {
    # Line is assumed to be of form:
    # epoch_time YYYY/MM/DD HH:MM:SS radar END COPY old_field new_field
    # Remove entry from corr array.
    old_field = $7
    new_field = $8
    n_del = n_corr["COPY",old_field,new_field]
    delete corr[n_del]
    n_cmd--
}
/START +MUL/ {
    # Line is assumed to be of form:
    # epoch_time YYYY/MM/DD HH:MM:SS radar START MUL data_type factor
    # Add entry to corr array ordering that field data_type be multiplied
    # by factor.
    data_type = $7
    factor = $8
    corr[n_cmd] = sprintf("Multiply %s by %f", data_type, factor)
    n_corr["MUL",data_type] = n_cmd
    n_cmd++
}
/END +MUL/ {
    # Line is assumed to be of form:
    # epoch_time YYYY/MM/DD HH:MM:SS radar END MUL data_type factor
    # Remove entry from corr array.
    data_type = $7
    n_del = n_corr["MUL",data_type]
    delete corr[n_del]
    n_cmd--
}
/START +DT/ {
    # Line is assumed to be of form:
    # epoch_time YYYY/MM/DD HH:MM:SS radar START DT seconds
    # Add entry for time correction dt to corr array.
    dt = $7
    corr[n_cmd] = sprintf("Increment time by %f seconds", dt)
    n_corr["DT"] = n_cmd
    n_cmd++
}
/END +DT/ {
    # Line is assumed to be of form:
    # epoch_time YYYY/MM/DD HH:MM:SS radar END DT seconds
    # Remove entry for time correction from corr array.
    n_del = n_corr["DT"]
    delete corr[n_del]
    n_cmd--
}
/START +LAL\/LON/ {
    # Line is assumed to be of form:
    # epoch_time YYYY/MM/DD HH:MM:SS radar START LAT/LON latitude longitude
    # Add an entry for the location to corr array
    lat = $7
    lon = $8
    corr[n_cmd] = sprintf("Radar lat = %f", lat)
    n_corr["LAT"] = n_cmd
    n_cmd++
    corr[n_cmd] = sprintf("Radar lon = %f", lon)
    n_corr["LON"] = n_cmd
    n_cmd++
}
/END +LAT\/LON/ {
    # Line is assumed to be of form:
    # epoch_time YYYY/MM/DD HH:MM:SS radar END LAT/LON latitude longitude
    # Remove entry for location from corr array
    n_del = n_corr["LAT"]
    delete corr[n_del]
    n_del = n_corr["LON"]
    delete corr[n_del]
    n_cmd--
}
/START +DAZ/ {
    # Line is assumed to be of form:
    # epoch_time YYYY/MM/DD HH:MM:SS radar START DAZ angle
    # Add an entry for azimuth correction to corr array
    angle = $7
    corr[n_cmd] = sprintf("Add %f degrees to all azimuths", angle)
    n_corr["DAZ"] = n_cmd
    n_cmd++
}
/END +DAZ/ {
    # Line is assumed to be of form:
    # epoch_time YYYY/MM/DD HH:MM:SS radar END DAZ angle
    # Remove entry for azimuth correction from corr array
    n_del = n_corr["DAZ"]
    delete corr[n_del]
    n_cmd--
}
/START +DEL/ {
    # Line is assumed to be of form:
    # epoch_time YYYY/MM/DD HH:MM:SS radar START DEL field field ...
    # For each field, add an entry to corr array to delete listed fields
    # from volume
    for (n = 7; n <= NF && $n != "#"; n++) {
	field = $n
	corr[n_cmd] = sprintf("Delete %s", field)
	n_corr[field] = n_cmd
	n_cmd++
    }
}
/END   +DEL/ {
    # Line is assumed to be of form:
    # epoch_time YYYY/MM/DD HH:MM:SS radar END   DEL field field ...
    # For each field, remove entry for field deletion from  corr array
    for (n = 7; n <= NF; n++) {
	field = $n
	n_del = n_corr[field]
	delete corr[n_del]
    }
    n_cmd--
}
/\.RAW[0-9A-Z][0-9A-Z][0-9A-Z][0-9A-Z]/ {
    # Line is assumed to be of form:
    # epoch_time YYYY/MM/DD HH:MM:SS RadarYYMMDDHHMMSS.RAWXXXX.sfx
    # Last word is a volume specifier. Create a new file named for
    # the volume, with the .RAW* suffix replaced with .CORR.
    # Print the current corrections to this file.
    vol = $4
    print $4 > vol
    if ( n_cmd == 0 ) {
	print "No corrections" >> vol
    } else {
	for (n = 0; n < n_cmd; n++) {
	    if ( length(corr[n]) > 0 ) {
		print corr[n] >> vol
	    }
	}
    }
    close(vol)
}
