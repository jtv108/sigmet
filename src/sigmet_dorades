#!/bin/sh
#
# sigmet_dorades.sh --
#	This script creates sweep files from Sigmet raw product volumes.
#
# It reads paths to Sigmet raw product volumes from standard input.
# The paths should be absolute.
# An input line of form "/*.RAW*" is assumed to be the absolute path of a
# Sigmet raw product volume. This script will find or create a directory
# named for the volume where it will put sweep files.  The name of the
# directory will be the volume name without any .bz2 or .gz suffixes.
# The new directory will contain sigmet_dorade output.
#
# sigmet_dorade and sigmet_raw must be in the current path.
#
# Optional environment variables:
#	SIGMET_SEM_NPROC	- number of background processes.
#	SIGMET_SEM_MEM_SZ	- memory limit for background processes.
#
# To regulate process count and memory usage, clsem should be in the
# current path. Otherwise, this script will start a conversion process
# for each volume listed in standard input. This could be a large system
# load if the number of volumes to convert is large.
#
# Copyright (c) 2011, Gordon D. Carrie. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 
#     * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Please send feedback to dev0@trekix.net


# Defaults for semaphores
SIGMET_SEM_NPROC=${SIGMET_SEM_NPROC:-"4"}
SIGMET_SEM_MEM_SZ=${SIGMET_SEM_MEM_SZ:-"600"}

# Clean up on exit
cleanup() {
    $CLSEM -d $SIGMET_SEM_PROC
    $CLSEM -d $SIGMET_SEM_MEM
}
trap " cleanup; " EXIT
trap " echo $0 exiting on TERM signal;exit 1; " TERM
trap " echo $0 exiting on KILL signal;exit 1; " KILL
trap " echo $0 exiting on QUIT signal;exit 1; " QUIT
trap " echo $0 exiting on INT signal;exit 1; " INT
trap " echo $0 exiting on HUP signal;exit 1; " HUP

# If clsem present, create semaphore to restrict number of background processes.
CLSEM=clsem
if clsem -V 2> /dev/null
then
    export CLSEM
    SIGMET_SEM_PROC=`$CLSEM -c`
    export SIGMET_SEM_PROC
    printf "$0 limiting to $SIGMET_SEM_NPROC background processes"
    printf " with semaphore $SIGMET_SEM_PROC\n"
    $CLSEM $SIGMET_SEM_NPROC $SIGMET_SEM_PROC || exit 1
    SIGMET_SEM_MEM=`$CLSEM -c`
    export SIGMET_SEM_MEM
    printf "$0 limiting to $SIGMET_SEM_MEM_SZ megabytes"
    printf " with semaphore $SIGMET_SEM_MEM.\n"
    $CLSEM $SIGMET_SEM_MEM_SZ $SIGMET_SEM_MEM || exit 1
else
    echo WARNING: $0 not regulating background processes with semaphores.
    CLSEM=:
fi

if ! sigmet_dorade -v > /dev/null
then
    echo $0: could not execute sigmet_dorade
    exit 1
fi

while read raw_fl
do
    raw_fl_id=`basename $raw_fl`
    echo $0: processing $raw_fl

    # Wait until process count and memory usage allow for another
    # instance of sigmet_dorade.
    printf '%s ' "Waiting for process slot..."
    $CLSEM -1 $SIGMET_SEM_PROC
    printf '%s\n' " ok"
    if echo $raw_fl | grep -q '\.gz$'
    then
	sz_b=`gunzip -c $raw_fl | sigmet_hdr -a - | sigmet_sizex.awk` 
    elif echo $raw_fl | grep -q '\.bz2$'
    then
	bzcat -c $raw_fl | sigmet_raw load - $sock
	sz_b=`bzcat $raw_fl | sigmet_hdr -a - | sigmet_sizex.awk` 
    else
	sz_b=`sigmet_hdr -a $raw_fl | sigmet_sizex.awk` 
    fi
    if ! test $sz_b || [ $sz_b -eq 1 ]
    then
	echo Could not determine volume size for $raw_fl
	clsem 1 $SIGMET_SEM_PROC
	continue
    fi
    SIGMET_RAW_VOL_SZ=`echo 1 + $sz_b / 1024.0 / 1024.0 | bc`
    export SIGMET_RAW_VOL_SZ
    printf '%s ' "Waiting for memory..."
    $CLSEM -$SIGMET_RAW_VOL_SZ $SIGMET_SEM_MEM
    printf '%s\n' " ok"

    # If necessary, make a directory for the sweep files.
    # In a background sub-shell, go into the new directory and run
    # sigmet_dorade
    dir=`basename $raw_fl | sed -e 's/\.gz$//' -e 's/.\.bz2$//'`
    echo Creating sweep files for $raw_fl in $dir
    ( { mkdir -p $dir && cd $dir; } || {
	    echo $0: could not set working directory to $dir
	    $CLSEM 1 $SIGMET_SEM_PROC
	    $CLSEM $SIGMET_RAW_VOL_SZ $SIGMET_SEM_MEM
	    exit 1;
	}
	sigmet_dorade $raw_fl > sigmet_dorade.out 2>&1 ) &
done
wait

# Exit. This will call cleanup function defined above.
