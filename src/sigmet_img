#!/bin/sh
#
# sigmet_img --
#	Send an image of a sweep to standard output.
#
# Usage:
#	sigmet_img img_type data_type sweep_index socket
# where:
#	img_type	- "svg" or "ps"
#	data_type	- data type (e.g. DB_DBZ, DB_ZDR).
#	sweep_index	- index of sweep in volume. First sweep is 0.
#	socket		- socket that communicates with a sigmet_raw daemon.
#
# Environment variables:
#	SIGMET_RAW_PROJ		- must be set for ppi sweeps. This variable
#				  stores a command that reads longitude latitude
#				  values from standard input and prints x y values
#				  to standard output.
#	SIGMET_RAW_COLORS	- path to directory with color table
#				  files. For each data type DB_XXX
#				  this directory must contain a file
#				  named DB_XXX.clrs with output from
#				  the raster_clrs program appropriate
#				  for the data type. Defaults to
#				  current working directory.
#	SIGMET_RAW_BOUNDS	- list of assignments to variables
#				  giving limits of display area Must
#				  have form:
#				  "x_min_m=d;x_max_m=d;y_min_m=d;y_max_m=d;"
#				  where x_min_m, x_max_m, y_min_m, and
#				  y_max_m specify the left, right,
#				  top, and bottom limits of the
#				  displayed area in map coordinates,
#				  and d refers to some floating point
#				  value.  If SIGMET_RAW_BOUNDS is not
#				  set, this script uses sigmet_ppi_bnds
#				  to get the limits.
#	SIGMET_RAW_IMG_SZ	- width of the svg image, in pixels.
#
# The svg code for the image goes to standard output.
#
# Copyright (c) 2011, Gordon D. Carrie. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 
#     * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Please send feedback to dev0@trekix.net

# Parse command line
if [ $# -ne 4 ]
then
    echo Usage: $0 image_type data_type sweep_index socket 1>&2
    exit 1
fi
img_type=$1
data_type=$2
sweep_index=$3
sock="$4"

if [ "$img_type" != "svg" -a "$img_type" != "ps" ]
then
    printf "$0: unknown image type: $img_type. " 1>&2
    printf "Image type must be \"svg\" or \"ps\"\n" 1>&2
    exit 1
fi
color_dir=${SIGMET_RAW_COLORS:-"."}
color_fl=${color_dir}/${data_type}.clrs
if ! test -f "$color_fl"
then
    echo "Could not find color file $color_fl" 1>&2
    exit 1
fi

# Identify and set up for scan mode
eval `sigmet_raw vol_hdr "$sock" | grep 'scan_mode'`
case "$scan_mode" in
    ppi*)
	scan_mode="ppi"
	if ! test "$SIGMET_RAW_PROJ"
	then
	    echo "PPI requires projection" 1>&2
	    exit 1
	fi
	proj_cmd="$SIGMET_RAW_PROJ"
	eval `sigmet_ppi_bnds $sweep_index "$SIGMET_RAW_PROJ" "$sock"`
	;;
    rhi)
	scan_mode="rhi"
	proj_cmd="cat"
	eval `sigmet_rhi_bnds $sweep_index "$sock"`
	;;
    *)
	echo "Unknown scan mode \"$scan_mode\"" 1>&2
	exit 1
	;;
esac

# Image size in meters
img_width_m=`echo "$X_MAX_M - $X_MIN_M" | bc -l`
img_height_m=`echo "$Y_MAX_M - $Y_MIN_M" | bc -l`

if [ $img_type = "svg" ]
then
    img_width_px=${SIGMET_RAW_IMG_SZ:-"800"}
    px_per_m=`echo "$img_width_px / ($X_MAX_M - $X_MIN_M)" | bc -l`
    img_height_px=`echo "($Y_MAX_M - $Y_MIN_M) * $px_per_m" | bc -l`
    printf '<svg\n'
    printf '  width="%.0f"\n' $img_width_px
    printf '  height="%.0f"\n' $img_height_px
    printf '  viewBox="0 0 %.0f %.0f"\n' $img_width_m $img_height_m
    printf '>\n'
    printf '<title>%s_%s_%d</title>\n' "$sock" $data_type $sweep_index
    printf '<desc>%s %s' "$sock" $data_type
    sweep_hdr=`sigmet_raw sweep_headers $sock \
	      | egrep 'sweep +'${sweep_index}' ' | sed 's/  */ /g'`
    printf ' %s degrees</desc>\n' "$sweep_hdr"
    egrep '([0-9.+-]+|INF|inf) #[0-9A-Fa-f]+ ([0-9.e+-]+|INF|inf)' $color_fl \
    | while read min color max
    do
	printf "<path style=\"fill: %s;\" d=\"\n" $color;
	sigmet_raw outlines $data_type $sweep_index $min $max - "$sock" \
	| $proj_cmd \
	| awk -v x_min_m=$X_MIN_M -v y_max_m=$Y_MAX_M '
	    {
		printf "M %.0f %.0f ", $1 - x_min_m, y_max_m - $2;
		getline
		printf "L %.0f %.0f ", $1 - x_min_m, y_max_m - $2;
		getline
		printf "L %.0f %.0f ", $1 - x_min_m, y_max_m - $2;
		getline
		printf "L %.0f %.0f Z\n", $1 - x_min_m, y_max_m - $2;
	    }'
	printf "\"/>\n"
    done
    printf "</svg>\n"
elif [ $img_type = "ps" ]
then
    img_width_pt=${SIGMET_RAW_IMG_SZ:-"800"}
    pt_per_m=`echo "$img_width_pt / ($X_MAX_M - $X_MIN_M)" | bc -l`
    img_height_pt=`echo "($Y_MAX_M - $Y_MIN_M) * $pt_per_m" | bc -l`
    printf '%%!PS-Adobe-3.0 EPSF-3.0\n'
    printf '%%%%BoundingBox: 0 0 %f %f\n' $img_width_pt $img_height_pt
    printf '%%%%EndComments\n'
    printf '/m { moveto } def\n'
    printf '/l { lineto } def\n'
    printf '/cf { closepath fill } def\n'
    printf '%%%%EndProlog\n'
    egrep '([0-9.+-]+|INF|inf) #[0-9A-Fa-f]+ ([0-9.e+-]+|INF|inf)' $color_fl \
    | while read min color max
    do
	# Convert #rrggbb to red green blue
	eval `echo $color | sed \
		's/#\(..\)\(..\)\(..\)/red=0x\1;green=0x\2;blue=0x\3/'`
	if ! test $red || ! test $green || ! test $blue
	then
	    echo Could not get red from $color 1>&2
	    exit 1
	fi
	red=`printf '%f / 255.0\n' $red | bc -l`
	green=`printf '%f / 255.0\n' $green | bc -l`
	blue=`printf '%f / 255.0\n' $blue | bc -l`

	printf '%f %f %f setrgbcolor\n' $red $green $blue
	sigmet_raw outlines $data_type $sweep_index $min $max - $sock \
	| $proj_cmd \
	| awk -v x_min_m=$X_MIN_M -v y_min_m=$Y_MIN_M -v pt_per_m=$pt_per_m '
	    {
		printf "%.0f %.0f m\n",
			($1 - x_min_m) * pt_per_m, ($2 - y_min_m) * pt_per_m;
		getline
		printf "%.0f %.0f l\n", 
			($1 - x_min_m) * pt_per_m, ($2 - y_min_m) * pt_per_m;
		getline
		printf "%.0f %.0f l\n", 
			($1 - x_min_m) * pt_per_m, ($2 - y_min_m) * pt_per_m;
		getline
		printf "%.0f %.0f l\n", 
			($1 - x_min_m) * pt_per_m, ($2 - y_min_m) * pt_per_m;
		printf "cf\n"
	    }'
    done
    printf "%%%%EOF\n"
fi
exit 0
