#!/bin/sh
#
# sigmet_png_kml --
#	Create png and kml files for a Sigmet sweep.
#
# System requirements:
#	ImageMagick convert command.
#
# Usage:
#	sigmet_png_kml [-f] [-d] [-o] [-k] [-b bounds]
#		[-x pixels] [-y pixels] [-w pixels] --
#		data_type colors_file sweep_index volume_file
# where:
#	-f		- fill gaps between adjacent rays.
#	-b		- Limits of plot in plot coordinates (not display
#			  coordinates). bounds must be a string of form
#			  x_min=value,x_max=value,y_min=value,y_max=value
#			  Does not have to give all values. For values not
#			  given, default is to use sweep bounds.
#	-w		- width attribute of svg element in display. Ignored
#			  if -d option is present.
#	data_type	- data type (e.g. DB_DBZ, DB_ZDR).
#	colors_file	- specify color for each data interval. Should be
#			  formatted for sigmet_raw outlines command.
#	sweep_index	- index of sweep in volume. First sweep is 0.
#	volume_file	- Sigmet raw product file
#
#
# Copyright (c) 2012, Gordon D. Carrie. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 
#     * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Please send feedback to dev0@trekix.net

# Check for numerical value
check_num() {
    name="$1"
    val="$2"
    if ! test $val
    then
	printf "%s not set\n" "$name" 1>&2
	exit 1
    fi
    if ! printf '%g' $val > /dev/null 2>&1
    then
	printf "$0: expected number for %s, got %s\n" "$name" "$val" 1>&2
	exit 1
    fi
}

# Parse command line
w_dpy=800
fill=
x_min=
x_max=
y_min=
y_max=
while getopts :fb:w: opt
do
    case "$opt"
    in
	f)
	    fill="-f"
	    ;;
	b)
	    eval `echo "$OPTARG" | sed 's/,/;/g'`
	    ;;
	w)
	    w_dpy=$OPTARG
	    check_num "display width" $w_dpy
	    ;;
	\?)
	    echo "$0: unknown option $OPTARG" 1>&2
	    exit 1
	    ;;
    esac
done
if test $x_min; then check_num "x_min" $x_min; fi
if test $x_max; then check_num "x_max" $x_max; fi
if test $y_min; then check_num "y_min" $y_min; fi
if test $y_max; then check_num "y_max" $y_max; fi
shift `expr $OPTIND - 1`
if [ $# -ne 4 ]
then
    {
	printf "Usage: $0 [-f] [-d] [-b bounds] [-x pixels] [-y pixels]"
	printf " [-w pixels] -- data_type colors_file sweep_index volume_file\n"
    } 1>&2
    exit 1
fi
data_type="$1"
color_fl="$2"
sweep_index="$3"
vol_path="$4"

# Check for color table
if ! test -f "$color_fl"
then
    echo "$0: could not find color file $color_fl" 1>&2
    exit 1
fi

# Run sigmet_raw. Send commands and read output from fifos. Arrange for
# sigmet_raw termination and clean up on any exit.
cleanup() {
    echo > $out &
    cat $out > /dev/null
    echo exit > $in
    rm -f $in $out
}
trap cleanup EXIT
trap cleanup QUIT
trap cleanup INT
trap cleanup KILL
vol_fl=`basename $vol_path`
vol=`echo $vol_fl | sed -e 's/\.gz$//' -e 's/\.bz2$//'`
in=.${vol}.$$.in
out=.${vol}.$$.out
mkfifo $in $out
sigmet_raw ${vol_path} $in &

# Override radar location, if desired
if test $RADAR_LAT
then
    radar_lat=$RADAR_LAT
    sig_raw $in $out radar_lat $radar_lat
fi
if test $RADAR_LON
then
    radar_lon=$RADAR_LON
    sig_raw $in $out radar_lon $radar_lon
fi

# Assign sweep bounds to x_min, x_max, y_min, and y_max if not set from
# command line.
eval `sig_raw $in $out sweep_bnds $sweep_index | awk '
    /x_min/ {
	x_min = $2;
    }
    /x_max/ {
	x_max = $2;
    }
    /y_min/ {
	y_min = $2;
    }
    /y_max/ {
	y_max = $2;
    }
    END {
	printf "if ! test $x_min;then x_min=%s;fi; ", x_min;
	printf "if ! test $x_max;then x_max=%s;fi; ", x_max;
	printf "if ! test $y_min;then y_min=%s;fi; ", y_min;
	printf "if ! test $y_max;then y_max=%s;fi;\n", y_max;
    }'`
check_num "sweep x min" $x_min
check_num "sweep x max" $x_max
check_num "sweep y min" $y_min
check_num "sweep y max" $y_max
width=`echo "$x_max - $x_min" | bc -l`
height=`echo "$y_max - $y_min" | bc -l`
h_dpy=`echo "$height / $width * $w_dpy" | bc -l`

# SVG transformation matrix
a=`echo "$w_dpy / ($x_max - $x_min)" | bc -l`
c=0.0
e=`echo "-$w_dpy * $x_min / ($x_max - $x_min)" | bc -l`
b=0.0
d=`echo "-$h_dpy / ($y_max - $y_min)" | bc -l`
f=`echo "$h_dpy * $y_max / ($y_max - $y_min)" | bc -l`

# Save volume headers
eval `sig_raw $in $out vol_hdr`
sweep_angle=`sig_raw $in $out sweep_headers \
	    | awk '/sweep +'${sweep_index}' / {printf "%.1f", $5}'`

# Make name for output file
png_fl="${vol}.${data_type}.${sweep_angle}.png"

# Print outlines.
{
    printf "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
    printf "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.0//EN\"\n"
    printf "   \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">\n"
    printf "<svg\n"
    printf "    width=\"%f\"\n" $w_dpy
    printf "    height=\"%f\"\n" $h_dpy
    printf "    xmlns=\"http://www.w3.org/2000/svg\"\n"
    printf "    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n"
    printf "    id=\"outermost\">\n"
    printf "<g transform=\"matrix(%f %f %f %f %f %f)\">" $a $b $c $d $e $f
    sig_raw $in $out outlines $fill $data_type $color_fl $sweep_index | sigmet_svg.awk
    printf "</g>\n"
    printf "</svg>\n"
} | convert - $png_fl

# Convert meters to great circle degrees
a0=`geog rearth`
export a0
meter_deg() {
    echo $1 / $a0 \* 180.0 / 3.1415927 | bc -l
}

# If desired, make KML. Icon element must be made later.
kml_tmpl='<?xml version="1.0" encoding="UTF-8"?>
<kml xmlns="http://www.opengis.net/kml/2.2">
  <GroundOverlay>
    <name>%s</name>
    <description>%s</description>
    <LatLonBox>
      <north>%.5f</north>
      <south>%.5f</south>
      <west>%.5f</west>
      <east>%.5f</east>
    </LatLonBox>
    <Icon></Icon>
  </GroundOverlay>
</kml>
'
d=`meter_deg $y_max`
north=`geog step $radar_lon $radar_lat 0.0 $d | awk '{printf $1}'`
d=`meter_deg $y_min`
south=`geog step $radar_lon $radar_lat 0.0 $d | awk '{printf $1}'`
d=`meter_deg $x_min`
west=`geog step $radar_lon $radar_lat 90.0 $d | awk '{printf $2}'`
d=`meter_deg $x_max`
east=`geog step $radar_lon $radar_lat 90.0 $d | awk '{printf $2}'`
kml_fl="${vol}.${data_type}.${sweep_angle}.kml"
printf "$kml_tmpl" $vol "$DESCRIPTION" $north $south $west $east \
	> $kml_fl

echo "$png_fl $kml_fl"
exit 0
